{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","quotes","colors","useState","Math","floor","random","length","quoteIndex","updQuoteIndex","colorIndex","updColorIndex","quote","color","stylesBg","backgroundColor","stylesBox","className","style","id","class","href","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAwHeA,MApHf,WAEE,IAAMC,EAAS,CACb,CACE,4FACA,kBAEF,CACE,6DACA,eAEF,CACE,oKACA,cAEF,CACE,6EACA,qBAEF,CACE,uIACA,iBAEF,CACE,2GACA,iBAEF,CACE,4DACA,eAEF,CACE,sFACA,iBAEF,CACE,2EACA,iBAEF,CACE,gFACA,2BAIEC,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAtDW,EA0DuBC,oBAAS,kBAC3CC,KAAKC,MAAMD,KAAKE,SAAWL,EAAOM,WA3DvB,mBA0DNC,EA1DM,KA0DMC,EA1DN,OA6DuBN,oBAAS,kBAC3CC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,WA9DvB,mBA6DNG,EA7DM,KA6DMC,EA7DN,KAiEPC,EAAQX,EAAOO,GACfK,EAAQX,EAAOQ,GAUfI,EAAW,CACfC,gBAAiBF,GAEbG,EAAY,CAChBH,MAAOA,GAGT,OACE,yBAAKI,UAAU,MAAMC,MAAOJ,GAC1B,yBAAKK,GAAG,YAAYD,MAAOF,GACzB,yBAAKC,UAAU,MAAME,GAAG,SACtB,uBAAGA,GAAG,OAAOD,MAAOF,GAClB,uBAAGI,MAAM,sBACR,IAAMR,EAAM,IAEf,uBAAGO,GAAG,UAAUP,EAAM,KAExB,yBAAKO,GAAG,iBACN,uBACEE,KAAK,2BACLF,GAAG,cACHF,UAAU,MACVC,MAAOJ,GAEP,uBAAGM,MAAM,oBAEX,4BACED,GAAG,YACHF,UAAU,MACVC,MAAOJ,EACPQ,QArCV,WAEEb,EAAcL,KAAKC,MAAMD,KAAKE,SAAWL,EAAOM,SAChDI,EAAcP,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,WA8B1C,iBC9FUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31dc055a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { useSpring, animated } from \"react-spring\";\n\nfunction App() {\n  //Arrays containing the data\n  const quotes = [\n    [\n      \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n      \"Nelson Mandela\",\n    ],\n    [\n      \"The way to get started is to quit talking and begin doing.\",\n      \"Walt Disney\",\n    ],\n    [\n      \"Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma â€“ which is living with the results of other people's thinking.\",\n      \"Steve Jobs\",\n    ],\n    [\n      \"If life were predictable it would cease to be life, and be without flavor.\",\n      \"Eleanor Roosevelt\",\n    ],\n    [\n      \"If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.\",\n      \"Oprah Winfrey\",\n    ],\n    [\n      \"If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.\",\n      \"James Cameron\",\n    ],\n    [\n      \"Life is what happens when you're busy making other plans.\",\n      \"John Lennon\",\n    ],\n    [\n      \"Spread love everywhere you go. Let no one ever come to you without leaving happier.\",\n      \"Mother Teresa\",\n    ],\n    [\n      \"Always remember that you are absolutely unique. Just like everyone else.\",\n      \"Margaret Mead\",\n    ],\n    [\n      \"Don't judge each day by the harvest you reap but by the seeds that you plant.\",\n      \"Robert Louis Stevenson\",\n    ],\n  ];\n\n  const colors = [\n    \"#E74C3C\",\n    \"#9B59B6\",\n    \"#9B59B6\",\n    \"#9B59B6\",\n    \"#9B59B6\",\n    \"#2ECC71\",\n    \"#F4D03F\",\n    \"#AAB7B8\",\n    \"#F0B27A\",\n  ];\n\n  // Set the initial states with useState function\n  const [quoteIndex, updQuoteIndex] = useState(() =>\n    Math.floor(Math.random() * quotes.length)\n  );\n  const [colorIndex, updColorIndex] = useState(() =>\n    Math.floor(Math.random() * colors.length)\n  );\n\n  const quote = quotes[quoteIndex];\n  const color = colors[colorIndex];\n\n  // function to be exhecuted when button is clicked\n  function handleClick() {\n    // Udpate the states in here\n    updQuoteIndex(Math.floor(Math.random() * quotes.length));\n    updColorIndex(Math.floor(Math.random() * colors.length));\n  }\n\n  // Style\n  const stylesBg = {\n    backgroundColor: color,\n  };\n  const stylesBox = {\n    color: color,\n  };\n\n  return (\n    <div className=\"App\" style={stylesBg}>\n      <div id=\"quote-box\" style={stylesBox}>\n        <div className=\"div\" id=\"quote\">\n          <p id=\"text\" style={stylesBox}>\n            <i class=\"fas fa-quote-left\"></i>\n            {\" \" + quote[0]}\n          </p>\n          <p id=\"author\">{quote[1]}</p>\n        </div>\n        <div id=\"btn-container\">\n          <a\n            href=\"twitter.com/intent/tweet\"\n            id=\"tweet-quote\"\n            className=\"btn\"\n            style={stylesBg}\n          >\n            <i class=\"fab fa-twitter\"></i>\n          </a>\n          <button\n            id=\"new-quote\"\n            className=\"btn\"\n            style={stylesBg}\n            onClick={handleClick}\n          >\n            New Quote\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}